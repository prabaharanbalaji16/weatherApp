{"version":3,"sources":["component/weather.js","component/form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","cityname","console","log","weather_status","temp","mini","maxi","desc","Form","onSubmit","handler","name","type","placeholder","autoComplete","App","getWeather","e","a","preventDefault","target","elements","city","value","fetch","api_call","json","response","setState","sys","country","weather","main","cel","temp_max","temp_min","description","state","undefined","min","max","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRA0DeA,G,iBAvDA,SAACC,GACZ,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,SACVD,EAAME,SACP,4BAAKF,EAAME,UAAe,GACzBC,QAAQC,IAAIJ,EAAME,UAEK,iBAAvBF,EAAMK,eACP,wBAAIJ,UAAU,QACV,uBAAGA,UAAS,sCACV,GACkB,YAAvBD,EAAMK,eACP,wBAAIJ,UAAU,QACV,uBAAGA,UAAS,+BACV,GACkB,SAAvBD,EAAMK,eACP,wBAAIJ,UAAU,QACV,uBAAGA,UAAS,uCACV,GACkB,SAAvBD,EAAMK,eACP,wBAAIJ,UAAU,QACV,uBAAGA,UAAS,8BACV,GACkB,eAAvBD,EAAMK,eACP,wBAAIJ,UAAU,QACV,uBAAGA,UAAS,6BACV,GACkB,UAAvBD,EAAMK,eACP,wBAAIJ,UAAU,QACV,uBAAGA,UAAS,+BACV,GACkB,WAAvBD,EAAMK,eACP,wBAAIJ,UAAU,QACV,uBAAGA,UAAS,6BACV,GAELD,EAAMM,KACP,wBAAIL,UAAU,QACbD,EAAMM,KADP,UAEM,GAGLN,EAAMO,MAAQP,EAAMQ,KACrB,4BACI,0BAAOP,UAAU,QAAQD,EAAMO,KAA/B,UACA,0BAAMN,UAAU,QAAQD,EAAMQ,KAA9B,WACE,GAEN,wBAAIP,UAAU,QAAQD,EAAMS,U,OCxC7BC,EAXH,SAACV,GACb,OACI,6BACI,0BAAMW,SAAUX,EAAMY,SACtB,2BAAOC,KAAK,OAAQC,KAAK,OAAOb,UAAU,WAAWc,YAAY,OAAOC,aAAa,QAAO,6BAC5F,wCAAQf,UAAU,UAAlB,YAAqC,SAArC,UCyDOgB,E,kDAlDf,aAAe,IAAD,8BACZ,gBAWEC,WAZU,uCAYC,WAAOC,GAAP,iBAAAC,EAAA,6DACXD,EAAEE,iBACSF,EAAEG,OAAOC,SAASC,KAAKC,MAFvB,SAGcC,MAAK,gDAnBpB,gDAgBC,cAGHC,EAHG,gBAOcA,EAASC,OAPvB,OAOHC,EAPG,OAQT,EAAKC,SAAS,CACZN,KAAK,GAAD,OAAKK,EAAShB,KAAd,aAAuBgB,EAASE,IAAIC,SACxCA,QAASH,EAASE,IAAIC,QACtBC,QAASJ,EAASI,QAAQ,GAAGC,KAC7BC,IAAKN,EAASK,KAAK5B,KACnB8B,SAAUP,EAASK,KAAKE,SACxBC,SAAUR,EAASK,KAAKG,SACxBC,YAAaT,EAASI,QAAQ,GAAGK,cAG7BnC,QAAQC,IAAIyB,GACZ1B,QAAQC,IAAI,EAAKmC,MAAMH,UAnBpB,4CAZD,sDAEZ,EAAKG,MAAM,CACTf,UAAKgB,EACLlC,KAAK,KACLmC,IAAI,KACJC,IAAI,KACJT,aAAQO,EACRF,YAAY,IARF,E,qDAmCZ,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,CAAMW,QAAS+B,KAAKzB,aAEpB,kBAAC,EAAD,CACChB,SAAUyC,KAAKJ,MAAMf,KACrBlB,KAAMqC,KAAKJ,MAAMJ,IACjB5B,KAAMoC,KAAKJ,MAAMF,SACjB7B,KAAMmC,KAAKJ,MAAMH,SACjB/B,eAAgBsC,KAAKJ,MAAMN,QAC3BxB,KAAMkC,KAAKJ,MAAMD,mB,GA9CNM,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMC,c","file":"static/js/main.be144a55.chunk.js","sourcesContent":["import React from \"react\";\r\nimport 'weather-icons/css/weather-icons.css';\r\n\r\nconst Weather =(props)=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"cards\">\r\n                {props.cityname?\r\n                <h1>{props.cityname}</h1>:\"\"}\r\n                {console.log(props.cityname)}\r\n                \r\n                {props.weather_status===\"Thunderstorm\"?\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi wi-day-thunderstorm display-1`}></i>\r\n                </h5>:\"\"}\r\n                {props.weather_status===\"Drizzle\"?\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi wi-day-sleet display-1`}></i>\r\n                </h5>:\"\"}\r\n                {props.weather_status===\"Rain\"?\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi wi-day-storm-showers display-1`}></i>\r\n                </h5>:\"\"}\r\n                {props.weather_status===\"Snow\"?\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi wi-day-snow display-1`}></i>\r\n                </h5>:\"\"}\r\n                {props.weather_status===\"Atmosphere\"?\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi wi-day-fog display-1`}></i>\r\n                </h5>:\"\"}\r\n                {props.weather_status===\"Clear\"?\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi wi-day-sunny display-1`}></i>\r\n                </h5>:\"\"}\r\n                {props.weather_status===\"Clouds\"?\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi wi-day-fog display-1`}></i>\r\n                </h5>:\"\"}\r\n\r\n                {props.temp?\r\n                <h3 className=\"py-4\">\r\n                {props.temp}&deg; C\r\n                </h3>:\"\"\r\n                }\r\n                \r\n                {props.mini && props.maxi ?\r\n                <h3>\r\n                    <span  className=\"px-4\">{props.mini}&deg; C</span>\r\n                    <span className=\"px-4\">{props.maxi}&deg; C</span>\r\n                </h3>:\"\"}\r\n                {/* {minmaxTemp(props.min,props.max)} */}\r\n                <h4 className=\"py-4\">{props.desc}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nconst Form =(props)=>{\r\nreturn(\r\n    <div>\r\n        <form onSubmit={props.handler} >\r\n        <input name=\"city\"  type=\"text\" className=\"location\" placeholder=\"City\" autoComplete=\"off\"/><br />\r\n        <button className=\"button\" className=\"fetch\">Get</button>\r\n        </form>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Form;","import React,{useState,useEffect} from 'react';\nimport \"./App.css\";\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './component/weather';\nimport Form from './component/form';\n\n\n// const api_key=\"5e5eee674941d08b66595b94886cc908\";\nconst api_key=\"B_3qztsnkmWQZFCItyOiTgjGwuR3vDvDniHUoo277IQ\"\n\n//api call api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}\nclass App extends React.Component{\nconstructor() {\n  super();\n  this.state={\n    city:undefined,\n    temp:null,\n    min:null,\n    max:null,\n    weather:undefined,\n    description:\"\"\n  };\n}\n\n    getWeather=async (e)=>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n      const api_call = await fetch(\n        // `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${api_key}`\n        `https://trefle.io/api/v1/plants?token=${api_key}`\n        );\n      const response = await api_call.json();\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        weather: response.weather[0].main,\n        cel: response.main.temp,\n        temp_max: response.main.temp_max,\n        temp_min: response.main.temp_min,\n        description: response.weather[0].description,\n      });\n\n            console.log(response);\n            console.log(this.state.temp_max);\n    }\n\n  render(){\n  return(\n    <div className=\"App\">\n      <Form handler={this.getWeather} />\n\n      <Weather\n       cityname={this.state.city}\n       temp={this.state.cel}\n       mini={this.state.temp_min}\n       maxi={this.state.temp_max}\n       weather_status={this.state.weather}\n       desc={this.state.description} />\n    </div>\n  );\n}\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}